@h3 Kubernetes Object Management
@link https://kubernetes.io/docs/concepts/overview/working-with-objects/object-management/

@h4 Imperative commands
@pre Example 
@textarea kubectl create deployment nginx --image nginx

@h4 Imperative object configuration 
@pre Example
@textarea kubectl create -f nginx.yaml
@textarea kubectl delete -f nginx.yaml -f redis.yaml
@textarea kubectl replace -f nginx.yaml

@h4 Declarative object configuration 
@pre Example
@starttextarea
kubectl diff -f configs/
kubectl apply -f configs/
@endtextarea

@starttextarea
kubectl diff -R -f configs/
kubectl apply -R -f configs/
@endtextarea

---

@h3 Object Names and IDs
@link https://kubernetes.io/docs/concepts/overview/working-with-objects/names/
@pre Each object in your cluster has a Name that is unique for that type of resource. Every Kubernetes object also has a UID that is unique across your whole cluster.

---

@h3 Labels and Selectors
@link https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
@pre Labels are key/value pairs that are attached to objects such as Pods. Labels are intended to be used to specify identifying attributes of objects that are meaningful and relevant to users, but do not directly imply semantics to the core system. Labels can be used to organize and to select subsets of objects. Labels can be attached to objects at creation time and subsequently added and modified at any time. Each object can have a set of key/value labels defined. Each Key must be unique for a given object.

---

@h3 Namespaces
@link https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
@pre In Kubernetes, namespaces provides a mechanism for isolating groups of resources within a single cluster. Names of resources need to be unique within a namespace, but not across namespaces. Namespace-based scoping is applicable only for namespaced objects (e.g. Deployments, Services, etc) and not for cluster-wide objects (e.g. StorageClass, Nodes, PersistentVolumes, etc).

---

@h3 Annotations
@link https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
@pre You can use Kubernetes annotations to attach arbitrary non-identifying metadata to objects. Clients such as tools and libraries can retrieve this metadata.

---

@h3 Field Selectors
@link https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/
@pre Field selectors let you select Kubernetes objects based on the value of one or more resource fields. Here are some examples of field selector queries:

---

@h3 Finalizers
@link https://kubernetes.io/docs/concepts/overview/working-with-objects/finalizers/
@pre Finalizers are namespaced keys that tell Kubernetes to wait until specific conditions are met before it fully deletes resources marked for deletion. Finalizers alert controllers to clean up resources the deleted object owned.

---

@h3 Owners and Dependents
@link https://kubernetes.io/docs/concepts/overview/working-with-objects/owners-dependents/
@pre In Kubernetes, some objects are owners of other objects. For example, a ReplicaSet is the owner of a set of Pods. These owned objects are dependents of their owner.

---

@h3 Recommended Labels
@link https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
@pre You can visualize and manage Kubernetes objects with more tools than kubectl and the dashboard. A common set of labels allows tools to work interoperably, describing objects in a common manner that all tools can understand.

---
