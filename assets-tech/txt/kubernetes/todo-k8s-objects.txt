@h3 Objects in Kubernetes
@link https://kubernetes.io/docs/concepts/overview/working-with-objects/

---

@pre Kubernetes objects are persistent entities in the Kubernetes system. Kubernetes uses these entities to represent the state of your cluster. Specifically, they can describe:
@ol What containerized applications are running (and on which nodes)/The resources available to those applications/The policies around how those applications behave, such as restart policies, upgrades, and fault-tolerance

---

@h4 Object spec and status

@ol Almost every Kubernetes object includes two nested object fields that govern the object's configuration: the object spec and the object status./ For objects that have a spec, you have to set this when you create the object, providing a description of the characteristics you want the resource to have: its desired state./The status describes the current state of the object, supplied and updated by the Kubernetes system and its components. The Kubernetes control plane continually and actively manages every object's actual state to match the desired state you supplied.

---

@h4 Describing a Kubernetes Object

@pre When you create an object in Kubernetes, you must provide the object spec that describes its desired state, as well as some basic information about the object (such as a name). When you use the Kubernetes API to create the object (either directly or via kubectl), that API request must include that information as JSON in the request body. Most often, you provide the information to kubectl in file known as a manifest. By convention, manifests are YAML (you could also use JSON format). Tools such as kubectl convert the information from a manifest into JSON or another supported serialization format when making the API request over HTTP.

@pre Example: application/deployment.yaml

@starttextarea
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2 # tells deployment to run 2 pods matching the template
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
@endtextarea

---

@h4 Creating a Deployment Object

@textarea kubectl apply -f https://k8s.io/examples/application/deployment.yaml

@start-pre
Output:
deployment.apps/nginx-deployment created
@end-pre

---

@h4 Required fields

@ol apiVersion - Which version of the Kubernetes API you're using to create this object/kind - What kind of object you want to create/metadata - Data that helps uniquely identify the object, including a name string, UID, and optional namespace/spec - What state you desire for the object