@h3 HTTPS

@h4 HTTPS Inner Working Mechanism
@link https://github.com/ByteByteGoHq/system-design-101#how-does-https-work
@link https://github.com/ByteByteGoHq/system-design-101#top-4-forms-of-authentication-mechanisms
@startpre
1 - HTTPS uses combination of Asymmetric & Symmetric Encryption
    i)  - Asymmetric Encryption is used intially to establish connection
    ii) - Symmetric Encryption is used afterwards to exchange enrypted data
2 - SSL Certificates (Secure Socket Layer) are used for Asymmetric Encryption 
@endpre

---

@h3 OAuth2

@link https://github.com/ByteByteGoHq/system-design-101#oauth-20-explained-with-simple-terms

@h3 Authentication Mechanisms

@h4 Frequently Used Auth Mechanisms
@link https://github.com/ByteByteGoHq/system-design-101#top-4-forms-of-authentication-mechanisms
@startpre
1 - SSH (Secure Shell)
2 - OAuth2 (Token Based)
3 - Credentials (Username & Password)
@endpre

---

@h3 User Identity Management (Session, Token, JWT etc.)

@link https://github.com/ByteByteGoHq/system-design-101#session-cookie-jwt-token-sso-and-oauth-20---what-are-they
@startpre
Identity Management usually is 3 steps process
1 - Identification: Client identifies itself themselves to the server.
2 - Authentication: Server validates the identity of the client.
3 - Autherization : Server grants necessary permissions to the client.
@endpre

---

@h3 Password Storage Practices

@link https://github.com/ByteByteGoHq/system-design-101#how-to-store-passwords-safely-in-the-database-and-how-to-validate-a-password
@startpre
1 - Password must not be stored without encryption.
2 - Password itself should not be stored with or without encryption.
3 - Password should be stored using encryption of (password + salt) in DB.
4 - Salt is a randomly generated string, that too must be stored in DB.
5 - When user logs in with their password, server retries salt from the DB, encrypts it and matches it with encryption of (password + salt) which is already present in the DB, if match is successful user is authenticated.
@endpre

---

@h3 Token vs Session

@link https://www.youtube.com/watch?v=UBUNrFtufWo
@startpre
1 - Session : 
    1 - Server creates a session id and stores it in it's memory and shares with client as well. 
    2 - This limits the scalability of the application.
    3 - This also adds memory overhead on server side.
2 - Token   : 
    1 - Server creates a token (JWT) and shares it with client, but does not store it anywhere in it's memory. 
    2 - The tokens are signed such that only server can validate if the token is correct or not. 
    3 - This makes sure that the token can't be tampered with.
    4 - This allows application to easily scale.
    5 - as no particular server holds information of the client, servers can share secret keys to access client info.

@endpre

---

@h3 JWT (JSON Web Token)

@link https://www.youtube.com/watch?v=7Q17ubqLfaM
@link https://jwt.io/

@startpre
Components of JWT
1 - header
2 - payload
3 - verify signature

Server only keeps the secret key that can decode the JWT Token, so as long a secret key is safe, no one other than the server can decode the JWT token.
@endpre





